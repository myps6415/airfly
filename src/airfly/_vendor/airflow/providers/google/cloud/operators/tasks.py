# Auto generated by 'inv collect-airflow'
from airfly._ast import immutable
from airfly._vendor.airflow.models.baseoperator import BaseOperator


@immutable
class CloudTasksQueueCreateOperator(BaseOperator):
    location: "str"
    task_queue: "Queue"
    project_id: "typing.Union[str, NoneType]"
    queue_name: "typing.Union[str, NoneType]"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"


@immutable
class CloudTasksQueueDeleteOperator(BaseOperator):
    location: "str"
    queue_name: "str"
    project_id: "typing.Union[str, NoneType]"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"


@immutable
class CloudTasksQueueGetOperator(BaseOperator):
    location: "str"
    queue_name: "str"
    project_id: "typing.Union[str, NoneType]"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"


@immutable
class CloudTasksQueuePauseOperator(BaseOperator):
    location: "str"
    queue_name: "str"
    project_id: "typing.Union[str, NoneType]"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"


@immutable
class CloudTasksQueuePurgeOperator(BaseOperator):
    location: "str"
    queue_name: "str"
    project_id: "typing.Union[str, NoneType]"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"


@immutable
class CloudTasksQueueResumeOperator(BaseOperator):
    location: "str"
    queue_name: "str"
    project_id: "typing.Union[str, NoneType]"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"


@immutable
class CloudTasksQueuesListOperator(BaseOperator):
    location: "str"
    project_id: "typing.Union[str, NoneType]"
    results_filter: "typing.Union[str, NoneType]"
    page_size: "typing.Union[int, NoneType]"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"


@immutable
class CloudTasksQueueUpdateOperator(BaseOperator):
    task_queue: "Queue"
    project_id: "typing.Union[str, NoneType]"
    location: "typing.Union[str, NoneType]"
    queue_name: "typing.Union[str, NoneType]"
    update_mask: "typing.Union[typing.Dict, google.protobuf.field_mask_pb2.FieldMask]"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"


@immutable
class CloudTasksTaskCreateOperator(BaseOperator):
    location: "str"
    queue_name: "str"
    task: "typing.Union[typing.Dict, google.cloud.tasks_v2.types.task.Task]"
    project_id: "typing.Union[str, NoneType]"
    task_name: "typing.Union[str, NoneType]"
    response_view: "typing.Optional"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"


@immutable
class CloudTasksTaskDeleteOperator(BaseOperator):
    location: "str"
    queue_name: "str"
    task_name: "str"
    project_id: "typing.Union[str, NoneType]"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"


@immutable
class CloudTasksTaskGetOperator(BaseOperator):
    location: "str"
    queue_name: "str"
    task_name: "str"
    project_id: "typing.Union[str, NoneType]"
    response_view: "typing.Optional"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"


@immutable
class CloudTasksTaskRunOperator(BaseOperator):
    location: "str"
    queue_name: "str"
    task_name: "str"
    project_id: "typing.Union[str, NoneType]"
    response_view: "typing.Optional"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"


@immutable
class CloudTasksTasksListOperator(BaseOperator):
    location: "str"
    queue_name: "str"
    project_id: "typing.Union[str, NoneType]"
    response_view: "typing.Optional"
    page_size: "typing.Union[int, NoneType]"
    retry: "typing.Union[google.api_core.retry.Retry, NoneType]"
    timeout: "typing.Union[float, NoneType]"
    metadata: "typing.Union[typing.Sequence[typing.Tuple[str, str]], NoneType]"
    gcp_conn_id: "str"
    impersonation_chain: "typing.Union[str, typing.Sequence[str], NoneType]"
